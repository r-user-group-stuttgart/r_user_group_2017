rm(list=ls()) # löscht alle bisherigen Daten und Grafiken aus dem RAM.
options(scipen = 999) # keine e^-x Schreibweise für besonders kleine Werte
install.packages("dplyr")
library(tidyverse)
1 + 1
1/4 + 2*3 ^ 4
x <- 1
y <- 2
z <- x + y
z
vector <- c(2, 3, 4, 2, NA, 4, NA)
vector
vector == 2
blume_1 <- c(2, 3, 4, 2, NA, 4, NA)
blume_1
blume_1 == 2
is.na(blume_1)
blume_2 <- blume_1
rm(blume_2)
rm(blume_2, vector)
vector <- c(2, 3, 4, 2, NA, 4, NA)
mean(vector, na.rm = T)
sd(vector, na.rm = T)
mean(vector)
rm(list=ls()) # löschen der bisherigen Objekte
path_data <- "/Users/simonroth/Dropbox/methods/git/Rworkshop/data/forms.Rdata"
dat <- get(load(path_data))
rm(list=ls())
load(path_data)
path_data <- "/Users/simonroth/Dropbox/methods/git/Rworkshop/data/forms.Rdata"
load(path_data)
dat <- get(load(path_data))
str(dat)
class(dat)
class(dat$age)
nrow(dat)
ncol(dat)
length(dat)
dat$id
dat$gender
View(dat)
View(dat)
dat$id
dat[,c("id","gender")]
table(dat$gender)
table(dat[,3])
names(dat)
colnames(dat) # the same
summary(dat)
min(dat$age, na.rm = T)
max(dat$stats_know, na.rm = T)
range(dat$age)
range(dat$age, na.rm= T)
mean(dat$stats_know, na.rm = T)
median(dat$stats_know, na.rm = T)
sd(dat$stats_know, na.rm = T)
var(dat$stats_know, na.rm = T)
cor(dat$age,
dat$stats_know,
use = "pairwise.complete.obs")
path_data <- "/Users/simonroth/Dropbox/methods/git/Rworkshop/data/"
setwd(data_path)
path_data <- "/Users/simonroth/Dropbox/methods/git/Rworkshop/data/"
path_data <- "/Users/simonroth/Dropbox/methods/git/Rworkshop/data/"
View(dat)
path_data <- "/Users/simonroth/Dropbox/methods/git/Rworkshop/data/"
setwd(path_data)
getwd()
dir()
dat <- get(load("forms.Rdata"))
rm(list=ls()) # löscht alle bisherigen Daten und Grafiken aus dem RAM.
options(scipen = 999) # keine e^-x Schreibweise für besonders kleine Werte
library(tidyverse)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
#-------------------------------------------------#
# R-Workshop
# 12.05.2017
# B - Data Preperation mit `dplyr`
#-------------------------------------------------#
rm(list=ls()) # löscht alle bisherigen Daten und Grafiken aus dem RAM.
options(scipen = 999) # keine e^-x Schreibweise für besonders kleine Werte
#-------------------------------------------------#
# Packages installieren & laden
#-------------------------------------------------#
# install.packages("dplyr")
library(dplyr)
#-------------------------------------------------#
# Daten importieren
#-------------------------------------------------#
rm(list=ls()) # löschen der bisherigen Objekte
path_data <- "/Users/simonroth/Dropbox/methods/git/Rworkshop/data/"
setwd(path_data)
getwd()
dir()
load(file.choose())
dat <- get(load("forms.Rdata"))
#-------------------------------------------------#
# Daten inspizieren
#-------------------------------------------------#
# Welche Struktur hat der Datensatz?
str(dat)
# glimpse erfüllt die gleiche Funktion wie str
glimpse(dat)
#-------------------------------------------------#
# Filter
#-------------------------------------------------#
filter(dat, age < 23)
### Übungen
# 1.) Filter den Datensatz mit Personen die im Bachelor [1] sind (study).
# 2.) Filter den Datensatz nach Personen die bei stats_know zwischen 2 und 3 liegen.
#-------------------------------------------------#
# Select
#-------------------------------------------------#
select(dat, id, age)
### Übungen
# 1.) Wähle die Variablen gender, spez und study
#-------------------------------------------------#
# Rename Variablen
#-------------------------------------------------#
rename(dat,
respond = id,
alter = age,
geschlecht = gender,
spezial = spez)
#-------------------------------------------------#
# Arrange
#-------------------------------------------------#
arrange(dat, age) # aufsteigend
arrange(dat, desc(age)) # Reihenfolge umkehren -> absteigend
# 1.) sortiere den Datensatz nach stats_know
#-------------------------------------------------#
# Mutate
#-------------------------------------------------#
mutate(dat, stats1 = stats_know + 1)
mutate(dat, mean_age = mean(age))
# 1.) Erstelle eine neue Variable in dem du Alter quadrierst.
# 2.) Erstelle eine neue Variable in dem du den Mittelwert
# von stats_know von der Variable selbst abziehst (Mittelwertzentrierung).
#-------------------------------------------------#
# Funktion kombinieren mit %>%
#-------------------------------------------------#
filter(select(dat, id, age, spez), age > 30)
dat %>%
select(id, age, spez) %>%
filter(age < 25)
# 1.) Wähle die Variablen gender, stats_know und study und filter
# nach Frauen.
load(file.choose())
rm(list=ls()) # löschen der bisherigen Objekte
dat <- get(load(file.choose()))
# Welche Struktur hat der Datensatz?
str(dat)
glimpse(dat)
dat$age < 23
filter(dat, stats_know == 2, stats_know == 3)
filter(dat, stats_know >= 2 | stats_know =< 3)
filter(dat, stats_know >= 2 | stats_know <= 3)
filter(dat, stats_know >= 2 & gender == "Weiblich")
filter(dat, stats_know >= 2 & gender == "Weiblich")
dat_sub <- filter(dat, stats_know >= 2 & gender == "Weiblich")
dat_sub
dat_short <- select(dat, id, age)
View(dat_short)
select(dat, gender, spez, study)
dat_short <- select(dat, gender, spez, study)
arrange(dat, stats_konw)
arrange(dat, stats_know)
mutate(dat, age_sq = age*gae)
mutate(dat, age_sq = age*agee)
mutate(dat, age_sq = age*age)
mutate(dat, age_sq = age^2)
mutate(dat, stats_centered = stats_know - mean(stats_know, na.rm = T))
mean(stats_know, na.rm = T)
mean(dat$stats_know, na.rm = T)
mutate(dat, stats_centered = stats_know - mean(stats_know, na.rm = T))
scale(dat$stats_know)
scale(dat$stats_know, center = T, scale = F)
dat$stats_know_center <- scale(dat$stats_know, center = T, scale = F)
dat
dat$stats_know_center <- NULL
View(dat)
filter(select(dat, id, age, spez), age > 30)
dat %>%
select(id, age, spez) %>%
filter(age > 25)
filter(select(dat, id, age, spez), age > 22
dat %>%
select(id, age, spez) %>%
filter(age > 22)
filter(select(dat, id, age, spez), age > 22)
dat %>%
select(gender, stats_know, study) %>%
filter(gender == "Weiblich")
dat %>%
select(gender, stats_know, study) %>%
filter(study == 1) %>%
rename(stats = stats_know) %>%
arrange(stats)
dat %>%
select(gender, stats_know, study) %>%
filter(study == 1) %>%
rename(stats <- stats_know) %>%
arrange(stats)
dat %>%
select(gender, stats_know, study) %>%
filter(study == 1) %>%
rename(stats = stats_know) %>%
arrange(stats)
summarise(dat, mean_age = mean(age, na.rm = T))
summarise(dat, mean_stats = mean(stats_know, na.rm = T))
summarise(dat, mean_stats = mean(stats_know, na.rm = T))
dat %>%
group_by(study) %>%
summarise(mean_stats = mean(stats_know, na.rm = T))
dat %>%
group_by(study) %>%
tally()
View(dat_sub)
rm(list=ls()) # löscht alle bisherigen Daten und Grafiken aus dem RAM.
options(scipen = 999) # keine e^-x Schreibweise für besonders kleine Werte
library(sjPlot)
library(sjmisc)
library(sjstats)
library(ggplot2)
rm(list=ls()) # löscht alle bisherigen Daten und Grafiken aus dem RAM.
options(scipen = 999) # keine e^-x Schreibweise für besonders kleine Werte
#-------------------------------------------------#
# Packages installieren & laden
#-------------------------------------------------#
#install.packages("tidyuniverse")
# install.packages(c("sjPlot", "sjmisc", "sjstats", "ggplot2"))
# library(tidyverse)
library(sjPlot)
library(sjmisc)
library(sjstats)
library(ggplot2)
#-------------------------------------------------#
# Daten importieren
#-------------------------------------------------#
rm(list=ls()) # löschen der bisherigen Objekte
# Ordnerpfad der Daten + Datensatz in " "
#path_data <- ".../"
my_path <- "/Users/simonroth/Dropbox/methods/git/Rworkshop/data/forms.Rdata"
dat <- get(load(my_path))
str(dat)
gg_gender <- sjp.frq(dat$gender)
gg_gender$data
gg_gender$plot
sjp.setTheme(base = theme_bw())
gg_gender <- sjp.frq(dat$gender)
gg_gender$data
gg_gender$plot
gg_gender
gg_gender$plot
gg_gender
sjp.frq(dat$age,
type = "dens",
normal.curve = TRUE,
normal.curve.alpha = .3)
sjp.frq(dat$stats_know,
type = "dens",
normal.curve = TRUE,
normal.curve.alpha = .3)
sjp.frq(stats_know, type ="box")
sjp.frq(dat$stats_know, type ="box")
sjp.grpfrq(dat$stats_know, dat$gender, type = "box")
sjp.grpfrq(dat$stats_know,
dat$gender,
type = "box")
sjp.grpfrq(dat$stats_know,
as.factor(dat$gender),
type = "box")
library(dplyr)
na_matrix <- dat %>%
is.na %>%
ifelse(., "1", "0") %>%
as.data.frame %>%
mutate_each(funs(factor(.)))
sjp.stackfrq(na_matrix,
expand.grid = TRUE,
legend.labels = c("Beobachted","Fehlend"),
sort.frq = "last.desc")
sjp.scatter(x = dat$age,
y = dat$stats_know)
sjp.scatter(x = dat$age,
y = dat$stats_know,
jitter.dots = T)
sjp.scatter(x = dat$age,
y = dat$stats_know,
jitter.dots = T
)
sjp.scatter(x = dat$age,
y = dat$stats_know,
jitter.dots = T
)
sjp.scatter(x = dat$age,
y = dat$stats_know,
jitter.dots = T
)
install.packages("colourpicker")
sjp.scatter(x = dat$age,
y = dat$stats_know,
grp = study,
jitter.dots = T,
)
sjp.scatter(x = dat$age,
y = dat$stats_know,
grp = study,
jitter.dots = T
)
sjp.scatter(x = dat$age,
y = dat$stats_know,
grp = dat$study,
jitter.dots = T
)
sjp.scatter(x = dat$age,
y = dat$stats_know,
grp = dat$study,
jitter.dots = T,
geom.colors = c("blue","yellow")
)
shinyjs:::colourPickerAddin()
sjp.scatter(x = dat$age,
y = dat$stats_know,
grp = dat$study,
jitter.dots = T,
geom.colors = c("#CD6090", "#C0FF3E")
)
gg_scatter <- sjp.scatter(x = dat$age,
y = dat$stats_know,
grp = dat$study,
jitter.dots = T,
geom.colors = c("#CD6090", "#C0FF3E")
)
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
ggsave(gg_scatter$plot, file ="Streudiagram.png")
ggsave(gg_scatter$plot, file ="Streudiagram.png")
getwd()
ggsave(gg_scatter$plot, file ="Streudiagram.png")
ggsave(gg_scatter$plot, file ="Streudiagram.png", width = 8)
runApp('~/Dropbox/methods/git/Rworkshop/apps/simple_regression')
rm(list=ls()) # löscht alle bisherigen Daten und Grafiken aus dem RAM.
options(scipen = 999) # keine e^-x Schreibweise für besonders kleine Werte
#-------------------------------------------------#
# Packages installieren & laden
#-------------------------------------------------#
#install.packages("tidyuniverse")
# install.packages("texreg")
library(tidyverse)
library(sjPlot)
library(sjmisc)
library(sjstats)
library(ggplot2)
#-------------------------------------------------#
# Daten importieren
#-------------------------------------------------#
rm(list=ls()) # löschen der bisherigen Objekte
# Ordnerpfad der Daten + Datensatz in " "
path_data <- ".../"
my_path <- "/Users/simonroth/Dropbox/methods/git/Rworkshop/data/forms.Rdata"
dat <- get(load(my_path))
#-------------------------------------------------#
# Variablen recodieren
#-------------------------------------------------#
dat$spez <- as.factor(dat$spez)
dat$gender <- as.factor(dat$gender)
# Welche Struktur hat der Datensatz?
str(dat)
#-------------------------------------------------#
# Regressionen
#-------------------------------------------------#
fit1 <- lm(stats_know ~ study, data = dat)
fit2 <- lm(stats_know ~ study + gender , data = dat)
fit3 <- lm(stats_know ~ study + gender + age  , data = dat)
screenreg(list(fit1, fit2, fit3))
library(texreg)
screenreg(list(fit1, fit2, fit3))
stargazer(fit1, fit2, fit3,
type = 'html',
style = "ajps",
out = "regression_table.html" # zum exportieren
)
library(stargazer)
getwd()
stargazer(fit1, fit2, fit3,
type = 'html',
style = "ajps",
out = "regression_table.html" # zum exportieren
)
avs <- c("", "Statistischen Kenntnisse", "")
uvs <- c("Studium", "Geschlecht", "ALter")
sjt.lm(fit1, fit2, fit3,
string.est = "B",
show.se = T,
show.ci = F,
string.p = "p",
string.dv = "Abhängige Variable",
string.interc = "Konstante",
depvar.labels = avs,
pred.labels = uvs,
group.pred = FALSE
, file = "regression_table.html" # zum exportieren
)
